CREATE TABLE IF NOT EXISTS public.roles (
    role VARCHAR(255) NOT NULL PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS public.user_roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users ON DELETE CASCADE,
    role VARCHAR(255) NOT NULL REFERENCES public.roles ON DELETE CASCADE,
    UNIQUE (user_id, role)
);

INSERT INTO public.roles (role)
VALUES
    ('member'),
    ('admin'),
    ('registrar'),
    ('treasurer')
ON CONFLICT DO NOTHING;

ALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;

CREATE TABLE IF NOT EXISTS public.members (
    pid BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    street_address TEXT NOT NULL,
    city TEXT NOT NULL,
    state TEXT NOT NULL,
    zip TEXT NOT NULL,
    phone TEXT NOT NULL,
    email TEXT NOT NULL,
    emergency_contact TEXT NOT NULL,
    emergency_contact_phone TEXT NOT NULL,
    member_status TEXT NOT NULL,
    expiration_date DATE NOT NULL,
    date_of_birth DATE NOT NULL,
    deceased_date DATE,
    public BOOLEAN NOT NULL,
    orientation_date DATE,
    date_joined DATE NOT NULL,
    notes TEXT
);

DROP FUNCTION IF EXISTS public.get_current_user_roles CASCADE;
CREATE OR REPLACE FUNCTION public.get_current_user_roles()
RETURNS TABLE(role VARCHAR)
LANGUAGE sql STABLE SECURITY DEFINER
AS $$
    SELECT role
    FROM public.user_roles
    WHERE user_id = auth.uid();
$$;
GRANT EXECUTE ON FUNCTION public.get_current_user_roles TO authenticated;

ALTER TABLE public.members ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "select_roles" ON public.roles;
CREATE POLICY "select_roles" ON public.roles
    FOR SELECT
    USING ( TRUE );

DROP POLICY IF EXISTS "select_user_roles" ON public.user_roles;
CREATE POLICY "select_user_roles" ON public.user_roles
    FOR SELECT
    USING ( (select auth.uid()) = user_id );

DROP POLICY IF EXISTS "manage_user_roles" ON public.user_roles;
CREATE POLICY "manage_user_roles" ON public.user_roles
    FOR ALL
    USING (EXISTS (
        SELECT 1
        FROM public.get_current_user_roles()  -- Avoid recursive policy
        WHERE role IN ('admin')
    ));

DROP POLICY IF EXISTS "select_members_basic" ON public.members;
CREATE POLICY "select_members_basic" ON public.members
    FOR SELECT
    USING (
        public = TRUE AND EXISTS (
            SELECT 1
            FROM public.user_roles ur
            WHERE ur.user_id = auth.uid() AND ur.role IN ('admin', 'member', 'registrar', 'treasurer')
        )
    );
DROP POLICY IF EXISTS "select_order" ON public.orders;
CREATE POLICY "select_order" ON public.orders
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1
            FROM public.user_roles ur
            WHERE ur.user_id = auth.uid() AND ur.role IN ('admin', 'registrar', 'treasurer')
        )
    );

DROP POLICY IF EXISTS "select_members_full" ON public.members;
CREATE POLICY "select_members_full" ON public.members
    FOR SELECT
    USING (EXISTS (
        SELECT 1
        FROM public.user_roles ur
        WHERE ur.user_id = auth.uid() AND ur.role IN ('admin', 'registrar')
    ));

DROP POLICY IF EXISTS "manage_members" ON public.members;
CREATE POLICY "manage_members" ON public.members
    FOR ALL
    USING (EXISTS (
        SELECT 1
        FROM public.user_roles ur
        WHERE ur.user_id = auth.uid() AND ur.role IN ('admin')
    ));

ALTER TABLE public.roles FORCE ROW LEVEL SECURITY;
ALTER TABLE public.user_roles FORCE ROW LEVEL SECURITY;

DROP FUNCTION IF EXISTS public.get_user_roles_with_email CASCADE;
CREATE FUNCTION public.get_user_roles_with_email()
RETURNS TABLE (
  pid int8,
  user_email varchar,
  role varchar
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM public.user_roles
    WHERE user_id = auth.uid()
      AND public.user_roles.role = 'admin'
  ) THEN
    RAISE EXCEPTION 'Access denied: Admin role required';
  END IF;

  RETURN QUERY
  SELECT
    ur.id AS pid,
    u.email AS user_email,
    ur.role
  FROM
    user_roles ur
  JOIN auth.users u ON ur.user_id = u.id
  ORDER BY
    u.email ASC;
END;
$$;
GRANT EXECUTE ON FUNCTION public.get_user_roles_with_email TO authenticated;

DROP FUNCTION IF EXISTS public.get_user_id_from_email CASCADE;
CREATE FUNCTION public.get_user_id_from_email(p_email varchar)
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM public.user_roles
    WHERE user_id = auth.uid()
      AND public.user_roles.role = 'admin'
  ) THEN
    RAISE EXCEPTION 'Access denied: Admin role required';
  END IF;
  RETURN (
    SELECT id
    FROM auth.users
    WHERE email = p_email
  );
END;
$$;
GRANT EXECUTE ON FUNCTION public.get_user_id_from_email TO authenticated;

ALTER TABLE public.committee_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.committee_members FORCE ROW LEVEL SECURITY;

ALTER TABLE public.committees ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.committees FORCE ROW LEVEL SECURITY;

ALTER TABLE public.forum_attendees ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.forum_attendees FORCE ROW LEVEL SECURITY;

ALTER TABLE public.forums ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.forums FORCE ROW LEVEL SECURITY;

ALTER TABLE public.leadership ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.leadership FORCE ROW LEVEL SECURITY;

ALTER TABLE public.leadership_positions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.leadership_positions FORCE ROW LEVEL SECURITY;

ALTER TABLE public.referrals ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.referrals FORCE ROW LEVEL SECURITY;

ALTER TABLE public.sdg_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sdg_members FORCE ROW LEVEL SECURITY;

ALTER TABLE public.sdgs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sdgs FORCE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "manage_committee_members" ON public.committee_members;
CREATE POLICY "manage_committee_members" ON public.committee_members
    FOR ALL
    USING (
        EXISTS (
            SELECT 1
            FROM public.get_current_user_roles()
            WHERE role = 'admin'
        )
    );

DROP POLICY IF EXISTS "manage_committees" ON public.committees;
CREATE POLICY "manage_committees" ON public.committees
    FOR ALL
    USING (
        EXISTS (
            SELECT 1
            FROM public.get_current_user_roles()
            WHERE role = 'admin'
        )
    );

DROP POLICY IF EXISTS "manage_forum_attendees" ON public.forum_attendees;
CREATE POLICY "manage_forum_attendees" ON public.forum_attendees
    FOR ALL
    USING (
        EXISTS (
            SELECT 1
            FROM public.get_current_user_roles()
            WHERE role = 'admin'
        )
    );

DROP POLICY IF EXISTS "manage_forums" ON public.forums;
CREATE POLICY "manage_forums" ON public.forums
    FOR ALL
    USING (
        EXISTS (
            SELECT 1
            FROM public.get_current_user_roles()
            WHERE role = 'admin'
        )
    );

DROP POLICY IF EXISTS "manage_leadership" ON public.leadership;
CREATE POLICY "manage_leadership" ON public.leadership
    FOR ALL
    USING (
        EXISTS (
            SELECT 1
            FROM public.get_current_user_roles()
            WHERE role = 'admin'
        )
    );

DROP POLICY IF EXISTS "manage_leadership_positions" ON public.leadership_positions;
CREATE POLICY "manage_leadership_positions" ON public.leadership_positions
    FOR ALL
    USING (
        EXISTS (
            SELECT 1
            FROM public.get_current_user_roles()
            WHERE role = 'admin'
        )
    );

DROP POLICY IF EXISTS "manage_referrals" ON public.referrals;
CREATE POLICY "manage_referrals" ON public.referrals
    FOR ALL
    USING (
        EXISTS (
            SELECT 1
            FROM public.get_current_user_roles()
            WHERE role = 'admin'
        )
    );

DROP POLICY IF EXISTS "manage_sdg_members" ON public.sdg_members;
CREATE POLICY "manage_sdg_members" ON public.sdg_members
    FOR ALL
    USING (
        EXISTS (
            SELECT 1
            FROM public.get_current_user_roles()
            WHERE role = 'admin'
        )
    );

DROP POLICY IF EXISTS "manage_sdgs" ON public.sdgs;
CREATE POLICY "manage_sdgs" ON public.sdgs
    FOR ALL
    USING (
        EXISTS (
            SELECT 1
            FROM public.get_current_user_roles()
            WHERE role = 'admin'
        )
    );

DROP POLICY IF EXISTS "select_order" ON public.orders;
CREATE POLICY "select_order" ON public.orders
    FOR ALL
    USING (
        EXISTS (
            SELECT 1
            FROM public.user_roles ur
            WHERE ur.user_id = auth.uid() AND ur.role IN ('admin')
        )
    );